import{_ as s,c as n,o as a,a4 as e}from"./chunks/framework.nQaBHiNx.js";const m=JSON.parse('{"title":"Best practice Folder Structure for your Vue 3 Typescript project","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"vue-with-typescript/folder-structure.md","filePath":"vue-with-typescript/folder-structure.md"}'),p={name:"vue-with-typescript/folder-structure.md"},t=e(`<h1 id="best-practice-folder-structure-for-your-vue-3-typescript-project" tabindex="-1">Best practice Folder Structure for your Vue 3 Typescript project <a class="header-anchor" href="#best-practice-folder-structure-for-your-vue-3-typescript-project" aria-label="Permalink to &quot;Best practice Folder Structure for your Vue 3 Typescript project&quot;">​</a></h1><h2 id="folder-structure-list" tabindex="-1">Folder structure list <a class="header-anchor" href="#folder-structure-list" aria-label="Permalink to &quot;Folder structure list&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>└───public</span></span>
<span class="line"><span>    |   favicon.ico</span></span>
<span class="line"><span>└───src</span></span>
<span class="line"><span>    └───assets</span></span>
<span class="line"><span>        | your-stylsheets.css</span></span>
<span class="line"><span>        | ...</span></span>
<span class="line"><span>    └───components</span></span>
<span class="line"><span>        └───elements</span></span>
<span class="line"><span>            | MyButtonComponent.vue</span></span>
<span class="line"><span>            | other very generic components</span></span>
<span class="line"><span>            | ...</span></span>
<span class="line"><span>        └───partials</span></span>
<span class="line"><span>            | HeaderBar.vue</span></span>
<span class="line"><span>            | other custom components</span></span>
<span class="line"><span>            | ...</span></span>
<span class="line"><span>    └───i18n</span></span>
<span class="line"><span>        | config.ts</span></span>
<span class="line"><span>        | en.json</span></span>
<span class="line"><span>        | other json translation files</span></span>
<span class="line"><span>        | ...</span></span>
<span class="line"><span>    └───icons</span></span>
<span class="line"><span>        | fontAwesomeIconConfig.ts</span></span>
<span class="line"><span>        | config for other icon libraries</span></span>
<span class="line"><span>        | ...</span></span>
<span class="line"><span>    └───mapper</span></span>
<span class="line"><span>        | mapper to map entities from one to another</span></span>
<span class="line"><span>        | ...</span></span>
<span class="line"><span>    └───models</span></span>
<span class="line"><span>        | core.ts</span></span>
<span class="line"><span>        | other files to store ts models and interfaces</span></span>
<span class="line"><span>        | ...</span></span>
<span class="line"><span>    └───router</span></span>
<span class="line"><span>        | index.ts</span></span>
<span class="line"><span>    └───services</span></span>
<span class="line"><span>        └───api</span></span>
<span class="line"><span>            | axios instance setup</span></span>
<span class="line"><span>            | other api layer files</span></span>
<span class="line"><span>            | ...</span></span>
<span class="line"><span>        | service files that will communicate with the api layer and mapper layer</span></span>
<span class="line"><span>        | ...</span></span>
<span class="line"><span>    └───stores</span></span>
<span class="line"><span>        | store files (f. e. Pinia)</span></span>
<span class="line"><span>    └───utils</span></span>
<span class="line"><span>        | coreUtils.ts</span></span>
<span class="line"><span>        | other global util files (f. e. dateUtils.ts)</span></span>
<span class="line"><span>    └───views</span></span>
<span class="line"><span>    |   app.js</span></span>
<span class="line"><span>    |   main.js</span></span>
<span class="line"><span>    |   shims-vue.d.ts</span></span></code></pre></div><h2 id="unit-tests" tabindex="-1">Unit tests <a class="header-anchor" href="#unit-tests" aria-label="Permalink to &quot;Unit tests&quot;">​</a></h2><p>Unit tests can either be stored into their own folder inside the <code>src</code>-folder, or they are stored in the same folder as the file they test. Both has its pros and cons. While storing it in a separate folder keeps the inner folder structures cleaner, storing it with the file the test file tests, gives you a very clear overview of what files do already have test files and which don&#39;t. In the end it&#39;s your choice, and the test-coverage created by the test suite also gives you information about where you are still missing tests.</p><h3 id="inside-a-test-folder" tabindex="-1">Inside a <code>test</code> folder <a class="header-anchor" href="#inside-a-test-folder" aria-label="Permalink to &quot;Inside a \`test\` folder&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-DuDH0" id="tab-u7ayx4u" checked="checked"><label for="tab-u7ayx4u">Inside a test folder</label><input type="radio" name="group-DuDH0" id="tab-YNd2C4o"><label for="tab-YNd2C4o">Inside a the folder youre testing</label></div><div class="blocks"><div class="language- vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>└───src</span></span>
<span class="line"><span>    └───assets</span></span>
<span class="line"><span>    └───components</span></span>
<span class="line"><span>        | MyComponent.vue</span></span>
<span class="line"><span>        | ...</span></span>
<span class="line"><span>    | ...</span></span>
<span class="line"><span>    └───utils</span></span>
<span class="line"><span>        | coreUtils.test.ts &lt;-- this tests the util files below</span></span>
<span class="line"><span>        | ...</span></span>
<span class="line"><span>    | ...</span></span>
<span class="line"><span>    └───test</span></span>
<span class="line"><span>        └───components</span></span>
<span class="line"><span>            | component test files</span></span>
<span class="line"><span>            | ...</span></span>
<span class="line"><span>        └───utils</span></span>
<span class="line"><span>            | util test files</span></span>
<span class="line"><span>            | ...</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>└───src</span></span>
<span class="line"><span>    └───assets</span></span>
<span class="line"><span>    └───components</span></span>
<span class="line"><span>        | MyComponent.test.ts &lt;-- this tests the component below</span></span>
<span class="line"><span>        | MyComponent.vue</span></span>
<span class="line"><span>        | ...</span></span>
<span class="line"><span>    └───...</span></span>
<span class="line"><span>    └───utils</span></span>
<span class="line"><span>        | coreUtils.test.ts &lt;-- this tests the util files below</span></span>
<span class="line"><span>        | coreUtils.ts</span></span>
<span class="line"><span>        | ...</span></span></code></pre></div></div></div>`,7),l=[t];function i(c,o,r,d,u,h){return a(),n("div",null,l)}const v=s(p,[["render",i]]);export{m as __pageData,v as default};
